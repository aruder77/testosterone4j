document[Model-Driven Testing -- Introducing TDsl]

authors[Axel Ruder]

codelanguage-def[tdsl][
	package, useCase, activity, op, field, toolkit, control, assert, identifiedBy, for, if, var, val,
	datatype, type, class, value, values, mappedBy, initial, =>, #, call, else, test, generator
]

chapter:einfuehrung[Einführung]

Das automatisierte Testen von Anwendungen mit graphischen Benutzeroberflächen wird häufig mit großer Skepsis betrachtet, 
hauptsächlich aus Sorge vor hohen Aufwänden zur Erstellung und Wartung der automatisierten Tests. 
Dabei ist eine frühzeitige Erkennung von Fehlern für eine effektive und kostengünstige Behebung bekanntermaßen essenziell. 
Automatisierte Tests können in zeitlich kurzen Abständen wiederholt ausgeführt werden und erleichtern damit erheblich die 
Suche nach der Fehlerursache, da die Anzahl der möglichen problematischen Änderungen entsprechend gering ist.
Jedoch kann sich die Wartung der Testskripte als ziemlich aufwändig erweisen. 
Ziel dieses Artikels ist es, einen Ansatz vorzustellen, bei dem durch Verwendung von Abstraktionen und 
modellgetriebenen Entwicklungsmethoden diese Aufwände minimiert werden können.


section:einordnung[Einordnung]

Die grafischen Benutzeroberflächen von betrieblichen Informationssystemen bestehen oft aus duzenden Masken, 
welche die fachlichen Anwendungsfälle realisieren. Es ist eine Herausforderung diese fachlichen Abläufe während 
der gesamten Systementwicklungszeit wiederholt effizient zu testen, da Masken im Laufe eines Projekts Änderungen unterworfen sind. 
Die Automatisierung von Tests trägt zwar dazu bei, Tests jederzeit wiederholbar zu machen, jedoch muss ein Weg gefunden werden, 
der den Anpassungsaufwand für die Testfall-Skripte aufgrund fachlicher oder technischer Änderungen über die Projektlaufzeit hinweg, 
in Grenzen hält.

Der Artikel fokussiert sich auf das Testen von maskenorientierten Anwendungen auf System-Ebene, d.h. aus Benutzersicht 
und nach fachlichen Anforderungen. Dabei wird das System als Black-Box betrachtet und über die Benutzeroberfläche bedient. 
Der vorgestellte Ansatz wurde für den Test einer Rich-Client Applikation entwickelt, lässt sich aber sehr leicht auch auf 
Web-Clients übertragen.

Unit- und Integrationstests, sowie Last- und Performancetests werden aus Platzgründen hier nicht weiter beleuchtet.


section:ziel[Ziel]

Ziel des hier vorgestellten Ansatzes ist es, eine effiziente, toolgestützte Spezifikation von
UI-Tests zu ermöglichen, unter Verwendung von modellgetriebenen Entwicklungsmethoden.

Die Modelle sollen dabei verwendet werden können um mit Hilfe eines Generators Testfälle abzuleiten,
die automatisiert ausführbar sind.

Sowohl die Modelle als auch der Testfall-Generator sollen dabei unabhängig vom verwendeten Automatisierungs-Framework
sein, so dass Technologieabhängig das richtige Werkzeug gewählt werden kann.

Die generierten Tests sollen sowohl Abläufe als auch die zugehörigen Testdaten enthalten. Dabei ist es
wichtig, dass Abhängigkeiten von Testdaten berücksichtigt werden.


chapter:testautomatisierung[Testautomatisierung]


section:captureReplay[Capture-/Replay Tools]

Sehr häufig werden für die Automatisierung von Benutzeroberflächen-Tests sogenannte Capture-/Replay Tools eingesetzt. 
Wie der Name bereits suggeriert, bieten diese Tools die komfortable Möglichkeit fachliche Anwendungsfälle (Use Cases) einmalig, 
durch ganz reguläre Bedienung der Anwendung aufnehmen zu können. Später kann der aufgezeichnete Ablauf auf Knopfdruck beliebig oft
wiedergegeben werden.

Basis dieser Tools ist dabei immer eine Testskript-Sprache, sowie mächtige Bibliotheksfunktionen zur Erkennung, Stimulation und 
Analyse von Benutzeroberflächen-Elementen (Controls). Die Aufnahmemöglichkeit ist dann lediglich eine Zusatzfunktion, 
bei der die durchgeführten Benutzeraktionen auf den Controls erkannt und in Form eines Testskripts aufzeichnet werden.

Die Vorteile der Capture-/Replay Tools sind erst einmal sehr verlockend. Die Erstellung der Testskripts beschränkt sich 
lediglich auf das einmalige Durchklicken des entsprechenden Anwendungsfalls und kann auch von entwicklungsfernen Personen 
mit rein fachlichem Knowhow durchgeführt werden. 

Die Aufnahme von Use Cases mit Hilfe dieser Tools hat jedoch für die Wartung der Testskripte ein gravierendes, konzeptionelles Problem.

section:redundanz[Das Problem der Redundanz]

Anwendungsfälle beinhalten häufig sich wiederholende Sequenzen in der Benutzeroberfläche, wie beispielsweise das Öffnen 
eines Hauptgeschäftsobjekts, die Selektion eines Subdatenbestands und die Freigabe dieser Daten zur Bearbeitung usw.

Werden bestimmte Masken oder Dialoge von mehreren Use Cases angesprochen und zeichnet man die zugehörigen Abläufe mit 
Capture/Replay-Tools auf, so enthalten die dazugehörenden, proprietären Tool-Skripte viele redundante Codeanteile. 

Diese Anteile bestehen hauptsächlich aus Code zur Identifikation und Stimulation der beteiligten GUI-Bedienelemente. 
Da innerhalb eines Ablaufs bestimmte GUI-Elemente (z.B. Menüs, Listauswahlen, etc.) in der Regel mehrmals vorkommen, 
erkennt man in den Codeanteilen viele sich wiederholende oder sehr ähnliche Zeilen.

Das daraus resultierende Problem ist die Wartbarkeit der Testskripte. Eine kleine Änderung in der Anwendung 
(z.B. Umbenennen eines GUI-Controls) führt zu mehreren fehlgeschlagenen Testfällen, was leider oft erst zur Laufzeit erkannt wird. 
Testmitarbeiter zeichnen dann entweder die Abläufe neu auf oder passen die vorhandenen Testskripte manuell an. 
Diese manuelle Korrektur kostet zwar weniger Aufwand, als eine komplette Neuaufzeichnung, aber, wegen der zahleichen 
Redundanzen in den Skripten, meistens immer noch mehr, als die verursachende Änderung (GUI-Control-Umbenennung) selbst.

Wenn Testskripte im realen Projektleben eine Chance haben sollen, während der Entwicklung der Anwendung aktuell zu bleiben, 
muss der Prozess für ihre Aktualisierung möglichst einfach sein. Gleiches gilt für die Testfalldurchführung.


chapter:pageObjects[PageObject Pattern]

Initial von Google für Web-Oberflächen entwickelt, versucht es den Testautomatisierungscode der fachlichen Funktionalitäten 
einer (Web-)Seite in einem sog. PageObject zu kapseln. Die Idee ist dabei Folgende:

ul[
	item[Für jede Seite der Anwendung wird eine PageObject-Klasse erstellt.]
	item[Das PageObject bietet Methoden für die fachliche Funktionalität, die ein Benutzer für eine bestimmte Seite ausführen kann.
		 Die Implementierung der Methoden enthält den Testautomatisierungscode zur Ausführung der entsprechenden Funktion.]
	item[Navigiert eine fachliche Funktion auf eine neue Seite, liefert die entsprechende PageObject-Methode ein PageObject 
		 der neuen Seite zurück.]
	item[Die eigentlichen Testskripte, die Abläufe der Anwendungsfälle testen, verwenden die Testautomatisierungs-Bibliotheken 
		 nicht mehr direkt, sondern werden ausschließlich gegen die PageObjects entwickelt.]
]

chapter:ansatz[Modellgetriebener Ansatz]

section:problem[Das Problem]

Obwohl das PageObject-Pattern bereits eine komfortable und redundanzarme Art bereitstellt automatisierte
Tests zu erstellen, gibt es noch Verbesserungspotential.

Die Erstellung von PageObjects ist ein bischen mühsam, obwohl diese einen großen Anteil an schematischem
Code beinhalten. Es wäre hier schön, eine effizientere Möglichkeit zu haben PageObjects zu erstellen.

Des Weiteren werden die eigentlichen Testfälle als JUnit-Test in Java geschrieben, was zum einen den
Vorteil der Mächtigkeit von Java bietet, jedoch für die Spezifikation von fachlichen Tests auch hinderlich
sein kann. Die Spezifikation von fachlichen Tests werden oft von Fachexperten ohne Entwicklungshintergrund
durchgeführt und sind deshalb nicht vertraut mit der für ein Testskript relativ komplexen Java-Syntax.

Außerdem bieten PageObjects keinen Ansatz für Testdaten. Natürlich können jede beliebige Testdaten in
die PageObjects eingesteuert werden, eine Lösung für eine clevere Generierung von Testdaten bieten sie
jedoch nicht. 


section:modellgetriebenerAnsatz[Modellierung mit TDsl]

Mit e[modellgetrieben] ist in diesem Artikel nicht die Verwendung von graphischen Modellen, wie etwa
UML- oder BPM-Modelle gemeint, sondern textuelle Modelle in Form einer Domänenspezifischen Sprache e[TDsl]. Mit
dieser Sprache wird die Benutzeroberfläche durch die Einführung von Test-relevanten Abstraktionen modelliert.

Die Idee hinter TDsl wird in den folgenden Kapiteln vorgestellt.

TDsl verwendet intern PageObjects, d.h. das auch bei TDsl die Testautomatisierungs-Implementierung in
zwei Teile getrennt wird. 
ol[
	item[Die Beschreibung der UI-Struktur
		Hier werden Datentypen, UI-Controls und Activities (TDsl-Bezeichnung für PageObjects) modelliert.]
	item[Spezifikation der Use-Cases und Tests
		Hier werden die Test-Use-Cases und ihr Verhalten spezifiziert.]
]

chapter:uistruktur[Beschreibung der UI-Struktur]

Die Struktur der Benutzeroberfläche muss einmalig, in der Regel parallel zur Entwicklung der Benutzeroberfläche,
modelliert werden und dient dann als Ausgangsbasis für die Spezifikation der Use-Cases und Tests.

Da die Spezifikation von Tests bei TDsl im Fokus steht, beschränkt sich die Beschreibung der UI ausschließlich
auf die Informationen die für die Spezifikation der Tests sowie die Automatisierung notwendig sind.

Im Wesentlichen müssen folgende Informationen festgehalten werden:

ul[
	item[In welche "Seiten" die Benutzeroberfläche gegliedert ist (in TDsl-Jargon e[Activities])]
	item[Welche Benutzeroberflächen-Elemente (e[Controls]) auf dieser Seite vorhanden sind]
	item[Welche e[Operationen] von den Controls angeboten werden]
	item[Welche e[Datentypen] von den Operationen verwendet werden (als Parameter und Rückgabewert)]
	item[Welche übergreifenden Operationen von der Seite selbst angeboten werden]
]

section:datentypen[Datentypen]

Zunächst müssen die fachlichen Datentypen der Anwendung und deren Äquivalenzklassen modelliert werden.
Damit der Testfall-Generator für jede beliebige Eingabe entscheiden kann was für ein Wert als Eingabe-Datum
verwendet werden darf, müssen wir ihm in Form einer Datentyp-Deklaration diese bekannt machen. 

Dabei wird nach dem Äquivalenzklassen-Prinzip vorgegangen. Eine Äquivalenzklasse ist eine Klasse von
(Eingabe-)Werten, für die von der zu testenden Anwendung gleiches Verhalten vom Test-Designer erwartet wird.
Dies erfolgt unter der Annahme dass es sinnvoll ist zumindest einen Wert aus jeder Äquivalenzklasse zu
testen.

Ein Beispiel für die Deklaration eines TDsl-Datentyps sieht folgendermaßen aus:

code[tdsl][
datatype IntegerDT type Integer {
	class largeNegative values -2147483646..-1000
	class negative values -1..999
	class zero value 0
	class positive values 1..999
	class largePositive values 1000..2147483647
}
]

Auch der technische Datentyp muss TDsl bekannt gemacht werden.

code[tdsl] [
type Integer mappedBy java.lang.Integer
]

Da für die Generierung der Testfälle Java verwendet wird, muss durch die Angabe von code[tdsl][mappedBy]
angegeben werden auf was für einen Java-Datentyp der Typ abgebildet wird.

Obiges Beispiel demonstriert die Verwendung von Äquivalenzklassen, im Allgemeinen sollten jedoch für
Datentypen wirklich die fachliche Datentypen der Anwendung verwendet werden, beispielsweise e[Seriennummer],
e[Baujahr] oder e[Postleitzahl]. 
  

section:controls[Controls]

Als nächstes werden die Benutzerelemente der Anwendung modelliert. Dies muss nur einmalig pro verwendetem
UI-Toolkit durchgeführt werden, nicht für jede zu testende Anwendung. Dieser Schritt ist erforderlich,
da TDsl mit jedem beliebigen Testautomatisierungsframework und jedem beliebigen UI-Toolkit verwendet
werden kann.

Ein Beispiel für die modellierung eines Controls ist Foldendes:

code[tdsl][
control TextControl {
	op String getText
	op setText(String str)
	op Boolean isEnabled
}
]

e[String] und e[Boolean] sind dabei technische Datentypen die mit code[type] definiert worden sind. Im
Beispiel wird ein Control e[TextControl] definiert, das drei Operationen bietet.

ul[
item[die Operation e[getText], die den aktuellen String-Wert des Controls zurückliefert]
item[die Operation e[setText], die den Wert e[str] im Control setzt]
item[die Operation e[isEnabled], die ermittelt ob das Control gerade aktiviert ist]
]

So können und müssen sämtliche von der Anwendung verwendete UI-Controls mit ihren Operationen in TDsl
modelliert werden. Natürlich ist auch die verwendung von mehreren Parametern (durch Komma getrennt) pro
Operation möglich.

Ein Beispiel für ein komplexeres Control wie zum Beispiel einer Tabelle sieht wie folgt aus:

code[tdsl] [

]

section:activities[Activities]

e[Activities] beschreiben die "Seiten" der Benutzeroberfläche. Was genau eine Seite darstellt obliegt
dem Test-Designer. Eine Activity kann dabei eine komplette Seite einer Web-Anwendung darstellen oder
aber auch nur einen Teil davon. Wichtig ist, dass die Anwendung disjunkt in Activities zerlegt wird.

section2:fields[Fields]

Auf jeder Activity (Seite) befinden sich Instanzen von Controls (e[Fields]), über die der Benutzer seine
Interaktion mit der Anwendung durchführt, beispielsweise das Eintragen eines Datums in ein Textfeld,
oder das Klicken auf einen Button.

Eine Activity wird wie folgt in TDsl spezifiziert:

code[tdsl][
activity LoginPage {
    
    field userName identifiedBy "key.userName" control TextControl {
        op UserNameDT getText
        op setText(UserNameDT str)
        op BooleanDT isEnabled
    }
    
    field password identifiedBy "key.password" control TextControl {
        op PasswordDT getText
        op setText(PasswordDT str)
        op BooleanDT isEnabled
    }
    
    field loginButton identifiedBy "key.login" control ButtonControl {
        op click => OverviewPage
    }
    
    op login(UserNameDT userName, PasswordDT password) {
        #userName.setText(str = userName)
        #password.setText(str = password)
        #loginButton.click
    } => OverviewPage
}
]

Die Activity e[LoginPage] besitzt drei Eingabeelemente (Fields): zwei Textfelder für Benutzername und
Passwort und einen Login-Button. Die drei Elemente werden jeweils durch eine e[Field]-Definition beschrieben.

Das erste Field wird durch e[userName] innerhalb der Seite eindeutig identifiziert. Der String nach dem
Schlüsselwort identifiedBy e["key.userName"] gibt eine ID an, mit Hilfe dessen das Test-Automatisierungsframework
das Control auf der Seite finden und identifizieren kann. In der Regel ist es dafür nötig diese ID bei
der Implementierung der Anwendung im Control zu hinterlegen.

Das e[control]-keyword gibt an um welches Control es sich bei diesem Eingabeelement handelt. 

Im darauf folgendem Block müssen nun sämtliche Operationen des Controls spezifisch für dieses Feld wiederholt
deklariert werden. Das ist aus zwei Gründen wichtig:

ol[
item[Für sämtliche (technische) Datentypen von Operations-Parametern und Rückgabewerte müssen für dieses
	spezifische Feld der passende fachliche Datentyp angegeben werden. Der fachliche Datentyp kann für
	jedes Feld ein anderer sein, deshalb muss dieses Mapping für jedes Feld angegeben werden. Im obigen
	Beispiel ist der Datentyp für get-/setText des Feldes "userName" UserNameDT, während der Datentyp
	für das Feld "password" PasswordDT beträgt.]
item[Der Aufruf einer Operation eines bestimmten Benutzeroberflächen-Elements kann einen Übergang zu
	einer anderen Seite auslösen. Dies kann in TDsl durch die Verwendung des Operators e[=>] modelliert
	werden, dem die nachfolgende Activity angegeben wird. Im obigen Beispiel führt ein Klick auf den 
	loginButton zur Activity e[OverviewPage].]
]

section2:activityOperations[Activity-Operationen]

Oft ist es sinnvoll mehrere Einzeloperationen auf UI-Elementen (Fields) zu einer fachlichen Operation
der Activity zusammenzufassen. Ein Beispiel hierfür zeigt folgendes Listing.

code[tdsl][
activity LoginPage {

	field loginName ...
	
	field password ...
	
	field loginButton ...
	
	op login(UserNameDT userName, PasswordDT password) {
		#userName.setText(str = userName)
		#password.setText(str = password)
		#loginButton.click
	} => OverviewPage
}
]

Es wird eine Operation e[login] deklariert, die Benutzername und Passwort entgegennimmt und den Anmeldevorgang
vornimmt. Dabei verwendet die Operation die Control-Operationen um den Vorgang durchzuführen. Die Syntax
und die Möglichkeiten des Operations-Inhalts entspricht denen von Use-Case Blöcken, die im folgenden
Kapitel näher vorgestellt wird. Als Resultat der Operation wird zur e[OperviewPage] verzweigt. Wichtig
dabei ist, dass der letzte Aufruf der Operation zur gleichen Activity verzweigt wie die Operation selbst. 

chapter:useCases[Spezifikation der Use-Cases]

Nachdem die Benutzeroberfläche in Form von Activities erfolgreich modelliert ist, können nun die Use-Cases
der Anwendung komfortabel durch den TDsl-Editor spezifiziert werden. 

Der Rumpf eines Use-Cases sieht folgendermaßen aus:

code[tdsl][
useCase OpenDocument initial MainWindowActivity {
	...
} => NavigationViewActivity
]

e[OpenDocument] ist der eindeutige Name des UseCases. Mit code[tdsl][initial] wird die Activity benannt,
die als Ausgangs-Activity des Use-Cases dient. Das optionale Schlüsselwort code[tdsl][=>] gibt die Activity
an mit der der Use-Case endet. Standardmäßig wird hierfür die Ausgangs-Activity angenommen.

Innerhalb des Use-Case Blocks können beliebig viele e[Statements] abgesetzt werden. Die verschiedenen
Arten von e[Statements] werden in den folgenden Sektionen vorgestellt.

Optional kann ein Use-Case auch Parameter besitzen:

code[tdsl][
useCase OpenDocument(StringDT documentName) initial MainWindowActivity {
	...
} => NavigationViewActivity
]

Der Typ des Parameters muss hierbei ein spezifizierter #code[tdsl][datatype] sein.

section:controlOperationCalls[Aufruf von Operationen]

In erster Linie ist natürlich der Aufruf von Operationen der Activities und deren Felder von Interesse.
Der Aufruf einer Operation erfolgt durch das Voranstellen von code[tdsl][#] gefolgt durch entweder
ul[
item[dem Namen der Activity-Operation, oder]
item[dem Namen des Fields und anschließendem Namen der Control-Operation, getrennt durch einen Punkt.]
]

Anschließend können noch die Parameter der Operation zugewiesen werden. Da jeder Parameter nur optional
angegeben werden muss, muss jedoch die Zuweisung durch explizite Angabe des Parameternamens erfolgen.

Beispiele für den Aufruf von Operationen sind:

code[tdsl][
#userName.setText(str="peterPan")
#password.setText
#loginButton.click
] 

oder als Activity-Operation
 
code[tdsl] [
#login(userName="peterPan", password="secret")
]

Als Wert für einen Parameter kann dabei eine beliebiger Xtend-Ausdruck angegeben werden, so dass hier
die volle Mächtigkeit von Xtend/Java zur Verfügung steht! Dabei kann natürlich auch auf die Use-Case
Parameter oder Variablen (siehe ref:variables) zugegriffen werden.

Falls ein oder mehrere Parameter einer Operation beim Aufruf nicht angegeben werden, wählt der Testdaten-Generator
einen Wert anhand der spezifizierten Äquivalenzklassen-Angaben des entsprechenden Datentyps. Die Strategie
bei der Wahl des Wertes hängt von den beim Test angegebenen Coverage-Kriterien ab (siehe ref:tests). 

section:subUseCaseCalls[Aufruf von anderen Use-Cases]

Um maximale Wiederverwendung zu fördern können Use-Cases andere Use-Cases aufrufen. Dies erfolgt über
das Schlüsselwort code[tdsl][call].

code[tdsl][
call OpenDocument
]

Die Übergabe eventueller Use-Case Parameter erfolgt analog der Parameter-Übergabe bei Operationen. 

section:variables[Variablen]

Oft ist es sinnvoll Werte für den späteren Zugriff in Variablen zu speichern. Dies erfolgt über die Schlüsselwörter
code[val], für finale (nicht veränderbare) Variablen, und code[var], für veränderbare Variablen. Der
Typ der Variablen muss nur angegeben werden wenn der Typ nicht durch einen angegebenen Ausdruck abgeleitet
werden kann.

Als Werte für Variablen können beliebige Xtend-Ausdrücke sowie Aufrufe von Operationen mit Rückgabewert
verwendet werden.

Beispiele:
code[tdsl] [
val userNameValue = #userName.getText
var String someString
someString = "TDsl sucks!".replace("su", "ro") 
]

section:ifElse[Bedingte Verzweigungen]

Auch bedingte Verzweigungen sind in TDsl natürlich möglich. Die Syntax folgt der Java/Xtend Syntax:

code[tdsl][
if (<Xtend-Ausdruck>) {
	...
} else if {
	...
} else {
	...
}
]

Die code[tdsl][else if] und code[tdsl][else] Zweige sind wie üblich optional.

In jedem Zweig können wiederum alle TDsl Statements dieses Kapitels verwendet werden.

section:expressions[Einbettung von Xtend Code]

An jeder Stelle des Use-Cases kann beliebiger Xtend-Code eingebettet werden. Damit steht die volle Mächtigkeit
von Xtend/Java zur Verfügung. Der Xtend-Code muss in eckige Klammern eingefasst werden.

Beispiel:

code[tdsl][
#userName.setText(str="peterPan")
\[ Thread::sleep(1000) \]
#password.setText
\[ System::out.println("User logging in.") \]
#loginButton.click
]

Auch in dem eingebettetem Code stehen die Parameter und Variablen des Use-Cases zur Verfügung.

section:asserts[Verifikation von Ergebnissen]

Die Verifikation von bestimmten Prüfpunkten ist stark abhängig vom verwendeten Test-Automatisierungs-Framework.
Deshalb gibt es in TDsl dafür keine explizite Unterstützung. Die Verifikation kann aber leicht Implementierungs-abhängig
als Xtend-Code realisiert werden.

Wichtig ist jedoch, dass dem verifizierenden Xtend-Code-Block das Schlüsselwort code[tdsl][assert] vorangestellt
wird um TDsl bewusst zu machen dass es sich hier um verifizierenden Code handelt. Dies ist deshalb wichtig
weil bei der Testfall-Generierung die Testfälle quasi e["trocken"] durchlaufen werden und die code[tdsl][assert]s
hier übersprungen werden müssen.

code[tdsl][
	val inputUserName = "Peter Pan"
	#userName.setText(str=inputUserName)
	val actualUserName = #userName.getText
	assert \[ org.junit.Assert::assertEquals(inputUserName, actualUserName) \]
]  

chapter:tests[Anlage von Tests]

Nachdem auch die Abläufe der Anwendung in Form von UseCases modelliert worden sind, können final die
eigentlichen Testfälle angelegt werden.

Dabei spezifizieren die Tests lediglich welcher Testfall-Generator verwendet werden soll, welcher UseCase auszuführen ist
und eventuell welche Abdeckungs-Kriterien angewandt werden sollen. 

Ein Beispiel für einen Test sieht folgendermaßen aus:

code[tdsl][
test OpenDocumentTest generator de.msg.xt.mdt.tdsl.SampleTestGenerator useCase OpenDocument
]  

Als Testfall-Generator kann eine beliebige Java-Klasse angegeben werden die das Interface de.msg.xt.mdt.tdsl.ITestGenerator
implementiert.

chapter:generierung[Generierung von Testfällen]

Das Modell wird direkt beim Speichern in entsprechende Java-Klassen übersetzt. Die Übersetzung erfolgt
dabei sehr direkt, d.h. für Controls werden Control-Interfaces, für Activities Activity-Klassen, für Use-Cases Use-Case-Klassen und für
Tests JUnit-Test-Klassen angelegt.

section:testdaten[Generierung von Test-Daten]

Damit die Tests ausgeführt werden können, müssen zunächst die Test-Daten vom Testfall-Generator erzeugt
werden. Dies geschieht durch die Ausführung der JUnit-Tests mit dem System-Property "generate=true".
Ist dieses Property bei der Ausführung der JUnit-Tests gesetzt, so werden vor der Test-Ausführung die
Test-Daten entsprechend der Abdeckungs-Kriterien generiert und in Dateien geschrieben. Bei weiteren Läufen
der JUnit-Tests werden diese Dateien dann ausgelesen und die Tests ausgeführt.

section:anbindungTestAutomatisierung[Anbindung an Test-Automatisierungs-Framework]

Bisher ist unser Modell wie auch die generierten Java-Klassen völlig unabhängig von der zu verwendenden
Technologie zur Ausführung der Tests. TDsl ist so flexibel dass praktisch jedes Test-Automatisierungs-Framework
angebunden oder jede Art von Testskripten generiert werden kann.

Dabei können die generierten Java-Klassen auf zwei unterschiedliche Art und Weise verwendet werden.

ul[
	item[Die Ausführung der generierten JUnit-Tests führt direkt die Test-Automatisierungs-Befehle gegen
	eine zu testende Anwendung aus. Dies funktioniert jedoch nur, wenn das Test-Automatisierungs-Framework
	Java-basiert ist und die Ausführung als JUnit-Test erlaubt. Beispiele hierfür sind SWT-Bot oder auch
	der Selenium Web-Driver.]
	item[Die Ausführung der generierten JUnit-Tests führt noch keine Test aus, sondern erzeugt Test-Skript-Dokumente
	die von der eigentlichen Test-Automatisierungs-Lösung interpretiert und ausgeführt wird. Auch eine
	manuelle Ausführung ist natürlich denkbar.]
]

Das ist deshalb möglich, weil zur eigentlichen Ausführung der Control- oder Activity-Operationen an extern
zu implementierende Klassen delegiert wird.  
Die Implementierung dieser wird im Folgenden kurz erläutert.
 

section2:controlImplementierung[Implementierung der Controls]

Aus einem Control Modellelement wird keine konkrete Klasse generiert, sondern nur ein Java-Interface
mit den entsprechenden Methoden. Für das konkrete zu verwendende Test-Framework müssen diese Interfaces
implementiert werden. 

Je nachdem welche der oben beschriebenen Methoden verwendet wird, wird in der Implementierung der Control-Methoden
entweder die UI direkt über das Test-Automatisierungs-Framework stimuliert oder es wird nur ein entsprechendes
Skript-Snippet zur späteren Ausführung in eine Datei geschrieben.

section2:activityAdapter[Activity-Adapter]

Für die Implementierung der Activity-Operationen wird ein ähnlicher Ansatz verfolgt. Für jede Activity,
die eigene Activity-Operationen besitzt, wird zusätzlich zur Activity-Klasse ein Activity-Adapter Interface
generiert. Dieses Interface ist analog zu den Controls adaptiert auf das jeweilige Test-Automatisierungs-Framework
zu implementieren.

section2:tdslmodule[Anbindung der Implementierungs-Klassen]

Nachdem sämtliche Control- und ActivityAdapter-Implementierungen ausprogrammiert sind, müssen diese noch
entsprechend angebunden werden. Dies erfolgt in TDsl durch Dependency Injection mit Hilfe von Google
Guice. Dazu muss in der Klasse code[TDslModule] ein entsprechendes Binding etabliert werden. Für jedes
Control- und ActivityAdapter-Interface muss eine Implementierung gebunden sein.



chapter:fazit[Fazit]



