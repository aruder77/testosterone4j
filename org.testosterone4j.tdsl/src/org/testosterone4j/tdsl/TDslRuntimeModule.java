/*
 * generated by Xtext
 */
package org.testosterone4j.tdsl;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.xbase.compiler.XbaseCompiler;
import org.eclipse.xtext.xbase.featurecalls.IdentifiableSimpleNameProvider;
import org.eclipse.xtext.xbase.scoping.batch.IBatchScopeProvider;
import org.eclipse.xtext.xbase.scoping.batch.ImplicitlyImportedTypes;
import org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer;
import org.testosterone4j.tdsl.converter.TDslValueConverterService;
import org.testosterone4j.tdsl.jvmmodel.TDslCompiler;
import org.testosterone4j.tdsl.jvmmodel.TDslQualifiedNameProvider;
import org.testosterone4j.tdsl.scoping.TDslBatchScopeProvider;
import org.testosterone4j.tdsl.scoping.TDslDefaultResourceDescriptionStrategy;
import org.testosterone4j.tdsl.scoping.TDslGlobalScopeProvider;
import org.testosterone4j.tdsl.scoping.TDslIdentifiableSimpleNameProvider;
import org.testosterone4j.tdsl.scoping.TDslScopeProvider;
import org.testosterone4j.tdsl.typeprovider.TDslImplicitlyImportedTypes;
import org.testosterone4j.tdsl.typeprovider.TDslTypeComputer;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
@SuppressWarnings("restriction")
public class TDslRuntimeModule extends
		org.testosterone4j.tdsl.AbstractTDslRuntimeModule {

	@Override
	public Class<? extends ITypeComputer> bindITypeComputer() {
		return TDslTypeComputer.class;
	}

	public Class<? extends XbaseCompiler> bindXbaseCompiler() {
		return TDslCompiler.class;
	}

	@Override
	public Class<? extends IScopeProvider> bindIScopeProvider() {
		return TDslScopeProvider.class;
	}

	public Class<? extends IBatchScopeProvider> bindIBatchScopeProvider() {
		return TDslBatchScopeProvider.class;
	}

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return TDslQualifiedNameProvider.class;
	}

	@Override
	public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		return TDslDefaultResourceDescriptionStrategy.class;
	}

	@Override
	public Class<? extends org.eclipse.xtext.scoping.IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return TDslGlobalScopeProvider.class;
	}

	@Override
	public Class<? extends IdentifiableSimpleNameProvider> bindIdentifiableSimpleNameProvider() {
		return TDslIdentifiableSimpleNameProvider.class;
	}

	public Class<? extends ImplicitlyImportedTypes> bindImplicitlyImportedTypes() {
		return TDslImplicitlyImportedTypes.class;
	}

	@Override
	public Class<? extends org.eclipse.xtext.conversion.IValueConverterService> bindIValueConverterService() {
		return (Class<? extends IValueConverterService>) TDslValueConverterService.class;
	}

}
