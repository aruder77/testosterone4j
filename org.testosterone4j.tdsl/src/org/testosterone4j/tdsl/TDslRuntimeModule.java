/*
 * generated by Xtext
 */
package org.testosterone4j.tdsl;

import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.xbase.compiler.OnTheFlyJavaCompiler;
import org.eclipse.xtext.xbase.compiler.XbaseCompiler;
import org.eclipse.xtext.xbase.scoping.XImportSectionNamespaceScopeProvider;
import org.eclipse.xtext.xbase.scoping.batch.ImplicitlyImportedFeatures;
import org.eclipse.xtext.xbase.scoping.batch.XbaseBatchScopeProvider;
import org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer;
import org.testosterone4j.tdsl.converter.TDslValueConverterService;
import org.testosterone4j.tdsl.jvmmodel.TDslCompiler;
import org.testosterone4j.tdsl.jvmmodel.TDslQualifiedNameProvider;
import org.testosterone4j.tdsl.scoping.TDslDefaultResourceDescriptionStrategy;
import org.testosterone4j.tdsl.scoping.TDslScopeProvider;
import org.testosterone4j.tdsl.typeprovider.TDslImplicitlyImportedTypes;
import org.testosterone4j.tdsl.typeprovider.TDslTypeComputer;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
@SuppressWarnings("restriction")
public class TDslRuntimeModule extends
		org.testosterone4j.tdsl.AbstractTDslRuntimeModule {

	@Override
	public void configure(Binder binder) {
		super.configure(binder);
		binder.bind(OnTheFlyJavaCompiler.class).to(
				TDslOnTheFlyJavaCompiler.class);
	}

	@Override
	public Class<? extends ITypeComputer> bindITypeComputer() {
		return TDslTypeComputer.class;
	}

	public Class<? extends XbaseCompiler> bindXbaseCompiler() {
		return TDslCompiler.class;
	}

	@Override
	public Class<? extends IScopeProvider> bindIScopeProvider() {
		return TDslScopeProvider.class;
	}

	@Override
	public Class<? extends XbaseBatchScopeProvider> bindXbaseBatchScopeProvider() {
		return TDslScopeProvider.class;
	}

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return TDslQualifiedNameProvider.class;
	}

	@Override
	public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		return TDslDefaultResourceDescriptionStrategy.class;
	}

	// @Override
	// public Class<? extends org.eclipse.xtext.scoping.IGlobalScopeProvider>
	// bindIGlobalScopeProvider() {
	// return TDslGlobalScopeProvider.class;
	// }

	public Class<? extends ImplicitlyImportedFeatures> bindImplicitlyImportedTypes() {
		return TDslImplicitlyImportedTypes.class;
	}

	@Override
	public Class<? extends org.eclipse.xtext.conversion.IValueConverterService> bindIValueConverterService() {
		return TDslValueConverterService.class;
	}

	// contributed by org.eclipse.xtext.generator.xbase.XbaseGeneratorFragment
	@Override
	public void configureIScopeProviderDelegate(com.google.inject.Binder binder) {
		binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class)
				.annotatedWith(
						Names.named(org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
				.to(XImportSectionNamespaceScopeProvider.class);
	}

}
