grammar org.testosterone4j.tdsl.TDsl with org.eclipse.xtext.xbase.Xbase

generate tdsl "http://testosterone4j.org/tdsl"
import 'http://www.eclipse.org/xtext/xbase/Xbase' as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore


TestModel:
	(packages+=PackageDeclaration)*
;

PackageDeclaration:
    'package' name=QualifiedName ('for' sutRef=[Toolkit|FQN])? '{'
    	(imports+=Import)*
    	//importSection=XImportSection?
    	(elements+=Element)*
    '}';
    
Import: 
	'import' importedNamespace=FqnWithWildCard
;

FqnWithWildCard: 
	FQN('.*')?
;
    
Element:
	Activity | UseCase | Control | Type | DataType | Test | TagsDeclaration | Toolkit | Predicate
;


Toolkit:
	'toolkit' name=ID 'using' ('controls')? '{'
		controls+=[Control|FQN] (',' controls+=[Control|FQN])*
	'}'
;

Type:
	'type' name=ID 'mappedBy' mappedBy=JvmTypeReference
;

DataType:
	'datatype' name=ID (default?='default' ('for')?)? 'type' type=[Type|FQN] '{'
		(classes+=EquivalenceClass)+
	'}'
;

Predicate:
	'predicate' name=ID body=XClosure
;

EquivalenceClass:
	'class' name=ID ('classValue' value=XExpression | 'classValues' values=XExpression | 'valueGenerator' valueGenerator=XExpression 'classPredicate' classPredicate=XClosure) ('tags' (tags+=[Tag|FQN])+)? 
;

TagsDeclaration:
	'tags' '{'
		tags+=Tag (',' tags+=Tag)*
	'}'
;

Tag:
	name=ID
;

Control:
	'control' name=ID '{'
		(operations+=Operation)+
	'}'
;

Operation:
	'op' (returnType=[Type|FQN] | 'void') name=ID ('(' params+=ControlOperationParameter (',' params+=ControlOperationParameter)* ')')? 
;

ControlOperationParameter:
	type=[Type|FQN] name=ID
;
    
Activity:
	'activity' name=ID ('identifiedBy' uniqueId=STRING)? ('subActivity' 'of' containingActivity=[Activity|FQN])? ('extends' parent=[Activity|FQN])? '{'
		(fields+=Field)*
		(operations+=ActivityOperation)*
	'}'
;

ActivityOperationParameter:
	dataType=[DataType|FQN] name=ID
;

ActivityOperation:
	'op' (returnType=[DataType|FQN] | 'void')? name=ID ('(' params+=ActivityOperationParameter (',' params+=ActivityOperationParameter)* ')')? (body=ActivityOperationBlock)? (nextActivities+=ConditionalNextActivity)* 
;

ActivityOperationBlock returns xbase::XBlockExpression:
	{ActivityOperationBlock}
  	'{' (expressions+=StatementLine)* '}'
;

Field:
	'field' name=ID ('identifiedBy' uniqueId=STRING)? 'control' control=[Control|FQN] ('datatype' dataType=[DataType|FQN])? (tags+=TagWithCondition)* 
	(
		 '{' 
		 (operations+=OperationMapping)*	
		 '}'
	)?
;

TagWithCondition:
	'tag' tag=[Tag|FQN] 
;

OperationMapping:
	'op' (dataType=[DataType|FQN] | 'void') name=[Operation|ID] ('(' (dataTypeMappings+=DataTypeMapping) (',' dataTypeMappings+=DataTypeMapping)* ')')? (nextActivities+=ConditionalNextActivity)*
;

DataTypeMapping:
	datatype=[DataType|FQN] name=[ControlOperationParameter|ID]  
;

ConditionalNextActivity:
	'=>' ((usually?='usually')? (next=[Activity|FQN]) | returnToLastActivity?='returnToLastActivity')
;

Parameter:
	dataType=[DataType|FQN] name=ID	
;

ParameterAssignment returns xbase::XExpression:
	{ParameterAssignment}
	name=[Parameter|FQN] '=' value=XExpression
;

ParameterInput returns xbase::XExpression:
	GenerationSelektor | XExpression
;

/*
 * Parameter for a parameter generation. The generator only takes an array of tags.
 * The tags may be specified directly using 'select(tags TAG_A, TAG_B)' or dynamically
 * via an expression 'select(someXBaseExpression)'.
 */
GenerationSelektor returns xbase::XExpression:
	{GenerationSelektor}
	'select' ('(' (('tags' tags+=[Tag|ID] (',' tags+=[Tag|ID])*) | expression=XExpression) ')' )?
;

OperationParameterAssignment returns xbase::XExpression:
	{OperationParameterAssignment}
	name=[DataTypeMapping|FQN] '=' value=ParameterInput
;

ActivityOperationParameterAssignment returns xbase::XExpression:
	{ActivityOperationParameterAssignment}
	name=[ActivityOperationParameter|FQN] '=' value=ParameterInput
;

Test:
	'test' name=ID 'generator' generator=JvmTypeReference 'useCase' useCase=[UseCase|FQN] ('{' 
		(('excludeTags' (excludeTags+=[Tag|FQN])+) | ('tags' tags+=[Tag|FQN]))?
		('minNumber' minNumber=INT)? 
		('maxNumber' maxNumber=INT)?
	'}')?
;

UseCase:
	'useCase' name=ID ('(' inputParameter+=Parameter (',' inputParameter+=Parameter)* ')')? 'initial' initialActivity=[Activity|FQN]
		block=UseCaseBlock 
		(nextActivity=ConditionalNextActivity)?
;

UseCaseBlock returns xbase::XBlockExpression:
	{UseCaseBlock}
  	'{' (expressions+=StatementLine)* '}'
;

StatementLine returns xbase::XExpression:
	{StatementLine}
	statement=Statement
;

Statement returns xbase::XExpression:
	SubUseCaseCall | OperationCall | ActivityOperationCall | VariableDeclaration | IfExpression | '[' XAssignment ']' | Assert | ActivityExpectation //| CompoundStatement
;

VariableDeclaration returns xbase::XVariableDeclaration:
	{xbase::XVariableDeclaration}
	(writeable?='var' | 'val') =>(=>(type=JvmTypeReference =>name=ValidID) | name=ValidID) ('=' right=Expression)?
;

Expression returns xbase::XExpression:
	OperationCall | ActivityOperationCall | GeneratedValueExpression | XExpression 
;

GeneratedValueExpression returns xbase::XExpression:
	{GeneratedValueExpression}
	'generatedValue' '(' param=[ecore::EObject|FQN] ')'
;

Assignment returns xbase::XExpression:
	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=Expression
;

IfExpression returns xbase::XIfExpression:
	{xbase::XIfExpression}
	'if' '(' if=Expression ')'
	then=InnerBlock
	('else' else=InnerBlock)?
;

InnerBlock returns xbase::XBlockExpression:
	{InnerBlock}
  	'{' (expressions+=StatementLine)* '}'
;



FQN:
	ID ('.' ID)*
;

MFQN:
	ID '.' ID
;

OFQN:
	'#' ID '.' ID
;

AFQN:
	'#' ID
;

OperationCall returns xbase::XExpression:
	{OperationCall}
	operation=[OperationMapping|OFQN] ('(' (paramAssignment+=OperationParameterAssignment) (',' paramAssignment+=OperationParameterAssignment)* ')')? 
;

ActivityOperationCall returns xbase::XExpression:
	{ActivityOperationCall}
	operation=[ActivityOperation|AFQN] ('(' (paramAssignment+=ActivityOperationParameterAssignment) (',' paramAssignment+=ActivityOperationParameterAssignment)* ')')? 
;

ActivityExpectation returns xbase::XExpression:
	{ActivityExpectation}
	'expect' activity=[Activity|FQN] 'if' '(' guard=XExpression ')' block=InnerBlock
;

SubUseCaseCall returns xbase::XExpression:
	{SubUseCaseCall}
	'call' useCase=[UseCase|FQN] ('(' paramAssignment+=ParameterAssignment (',' paramAssignment+=ParameterAssignment)*  ')')?
;

Assert returns xbase::XExpression:
	{Assert}
	'assert' '[' expression=Expression ']'
;

/*
CompoundStatement:
	'(' statements+=Statement ('|' statements+=Statement)+ ')'
; */
