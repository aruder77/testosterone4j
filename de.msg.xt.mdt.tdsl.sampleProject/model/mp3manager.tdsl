package mp3manager {
	
	tags { 
		Pflichtfeld, Empty
	}
	
	activityType WorkbenchWindow;
	
	activityType View;
	 
	activityType Editor;
	
	activityType Popup;
	
	type String mappedBy java.lang.String;
	
	datatype StringDT type String {
		class emptyString value "" Empty;
		class shortString value "shortString";
		class longString value "longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongString"; 		
	} 
	
	datatype ErrorStringDT type String {
		class ok value "OK";
		class missingValue value "Please enter a value";
	}
	
	control TextControl { 
		op setText(String str);
		op getText : String;
	}
	
	control TreeControl {
		op doubleClickItem;
	}
	
	control Label {
		op getText : String;
	}
	
	activity MainWindow type WorkbenchWindow {
		op openView => OpenViewDialog; 
		op findLogicalView => LogicalView;
	}
	
	activity LogicalView type View {
		field tree control TreeControl {
			doubleClickItem TreeControl.doubleClickItem => SongEditor;
		}
	}
	
	activity SongEditor identifiedBy "com.siemens.ct.mp3m.ui.editors.ids.Id3DataBindingEditor" type Editor {
		field title identifiedBy "Id3TagPage.Title_Label" control TextControl tag Pflichtfeld { 
			setText TextControl.setText (str StringDT TextControl.setText.str);
			getText TextControl.getText as StringDT;
		}
		
		field artist identifiedBy "Id3TagPage.Artist_Label" control TextControl tag Pflichtfeld { 
			setText TextControl.setText (str StringDT TextControl.setText.str);
			getText TextControl.getText as StringDT;
		}

		field album identifiedBy "Id3TagPage.Album_Label" control TextControl tag Pflichtfeld { 
			setText TextControl.setText (str StringDT TextControl.setText.str);
			getText TextControl.getText as StringDT;
		}

		field track identifiedBy "Id3TagPage.Track_Label" control TextControl {
			setText TextControl.setText (str StringDT TextControl.setText.str);
			getText TextControl.getText as StringDT;
		}
		
		field errorMarker identifiedBy "errorMarker" control Label { 
			getText Label.getText as ErrorStringDT;
		} 
		
		op saveAndClose;
		
		op openView(StringDT viewId);
	}
	
	
	activity OpenViewDialog type Popup {
		op selectLogicalView;
		op ok => MainWindow;
		op cancel => MainWindow;
	}
	
	
	useCase OpenLogicalView (StringDT param1) initial = MainWindow {
		activityOperation MainWindow.openView; 
		activityOperation OpenViewDialog.selectLogicalView;
		activityOperation OpenViewDialog.ok;
		activityOperation MainWindow.findLogicalView;
		op LogicalView.tree.doubleClickItem;
		op SongEditor.title.setText;
		op SongEditor.artist.setText; 
		op SongEditor.track.setText;
		
		var strDT = op SongEditor.title.getText;
		if (strDT.getValue().equals("Hello")) {
			activityOperation OpenViewDialog.cancel;
			op SongEditor.title.setText(str = select(tags Pflichtfeld,Empty));
			op SongEditor.track.setText(str = strDT);
			op SongEditor.track.setText(str = "Hello, world!");		
			op SongEditor.track.setText(str = select("Hello"));	
		}
		
		activityOperation SongEditor.openView(viewId=false);
		activityOperation SongEditor.openView(viewId="Hello, world!");
		activityOperation SongEditor.openView(viewId=select);
		activityOperation SongEditor.openView(viewId=select(tags Empty));
		
		var genValue = generatedValue(SongEditor.title.setText.str);
		
		[junit::framework::Assert::assertEquals("Hello", strDT.getValue())]
	}
	 
	useCase testUseCase initial = MainWindow {
		op SongEditor.title.setText;
		op SongEditor.album.setText;
		op SongEditor.track.setText;
		activityOperation SongEditor.saveAndClose;
	}
	
	test OpenLogicalViewTest generator de.msg.xt.mdt.base.SampleTestGenerator useCase OpenLogicalView;
}