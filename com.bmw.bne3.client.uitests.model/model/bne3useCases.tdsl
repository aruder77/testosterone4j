package bne3.usecases for Stdtoolkit {
	
	import de.msg.xt.mdt.tdsl.basictypes.*
	import bne3.datatypes.*
	import bne3.activities.*
	import bne3.usecases.changerequest.*
	
	useCase OpenView(StringDT category, StringDT name) initial MainWindow {
		#openView
		#selectView(category=category, viewId=name) 
		#ok
	}  
	
	useCase CreateMinimumCoding(ShortName shortName) initial MainWindow {
		val changeRequestName = "ChangeRequest" + System::currentTimeMillis
		call CreateChangeRequest(CreateChangeRequest.name=changeRequestName)
		
		call OpenEthernetNavigator
		#findEthernetNavigator
		#activateChangeRequest(title=changeRequestName)
		#tree.invokeContextMenu(nodePath="Ethernet/Datentyp-Kodierungen", contextMenuEntry="Datentyp-Kodierung hinzufügen")
		#returnToMain
		#findNewCodingEditor
		
		#allgemeinPage
		#shortname.setText(str=shortName)
		
		#returnToEditor
		#saveAndClose				
	}
	
	useCase CreateCoding(ShortName shortName) initial MainWindow {
		val changeRequestName = "ChangeRequest" + System::currentTimeMillis
		call CreateChangeRequest(CreateChangeRequest.name=changeRequestName)
		
		call OpenEthernetNavigator
		#findEthernetNavigator
		call ActivateChangeRequest(ActivateChangeRequest.name=changeRequestName)
		#tree.invokeContextMenu(nodePath="Ethernet/Datentyp-Kodierungen", contextMenuEntry="Datentyp-Kodierung hinzufügen")
		#returnToMain
		#findNewCodingEditor
		
		#allgemeinPage
		#longname.setText
		val longName = generatedValue(str)
		#shortname.setText(str=shortName)
		#textuelleBeschreibung.invokeContextMenu(contextMenuEntry="Element hinzufügen")
		#textuelleBeschreibung.setTextByName(row=0, columnName="Text")
		val text1 = generatedValue(textValue)	
		#textuelleBeschreibung.selectValueByName(row=0, columnName="Sprache")
		val sprache = generatedValue(textValue)	
		#textuelleBeschreibung.invokeContextMenu(contextMenuEntry="Element hinzufügen")
		#textuelleBeschreibung.setTextByName(row=1, columnName="Text", textValue="Second")
		#textuelleBeschreibung.selectValueByName(row=1, columnName="Sprache")
		#textuelleBeschreibung.invokeContextMenuOnRow(row=1, contextMenuEntry="Element löschen")
		#returnToEditor
		
		#kodierungPage
		[ Thread::sleep(100)]
		#physBasisDatenTyp.setText
		val physBasisDatenTyp = generatedValue(str)
		#physMinimum.setText
		val physMinimum = generatedValue(str)
		#physMinimumIntervallgrenze.setText
		val physMinimumIntervallgrenze = generatedValue(str)
		#physAufloesung.setText
		val physAufloesung = generatedValue(str)
		#physMaximum.setText
		val physMaximum = generatedValue(str)
		#physMaximumIntervallgrenze.setText
		val physMaximumIntervallgrenze = generatedValue(str)
		
		#internalBasisDatenTyp.setText
		val internalBasisDatenTyp = generatedValue(str) 
		#internalKategorie.setText
		val internalKategorie = generatedValue(str)
		#internalEncoding.setText
		val internalEncoding = generatedValue(str)
		#internalTermination.setText
		val internalTermination = generatedValue(str)
		
		#fixedBitLengthButton.click
		#bitLength.setText
		val bitLength = generatedValue(str)
		
		#returnToEditor
		#saveAndClose
		
		#findEthernetNavigator
		#openCoding(title=shortName.getValue())
		
		#allgemeinPage
		val actualLongName = #longname.getText
		val actualShortName = #shortname.getText
		val actualtext = #textuelleBeschreibung.getTextByName(row=0, columnName="Text")
		val actualSprache = #textuelleBeschreibung.getTextByName(row=0, columnName="Sprache")
		val actualAnzEntries = #textuelleBeschreibung.getRowCount
		assert [ junit::framework::Assert::assertEquals(longName.getValue(), actualLongName.getValue())] 
		assert [ junit::framework::Assert::assertEquals(shortName.getValue(), actualShortName.getValue())]
		assert [ junit::framework::Assert::assertEquals(text1.getValue(), actualtext.getValue())]
		assert [ junit::framework::Assert::assertEquals(sprache.getValue(), actualSprache.getValue())]
		assert [ junit::framework::Assert::assertEquals(1, actualAnzEntries.getValue())]
		#returnToEditor
		
		#kodierungPage
		[ Thread::sleep(100)]
		val actualPhysBasisDatenTyp = #physBasisDatenTyp.getText
		val actualPhysMinimum = #physMinimum.getText
		val actualPhysMaximum = #physMaximum.getText
		val actualPhysAufloesung = #physAufloesung.getText
		val actualPhysMinimumIntervallgrenze = #physMinimumIntervallgrenze.getText
		val actualPhysMaximumIntervallgrenze = #physMaximumIntervallgrenze.getText
		val actualInternalBasisDatenTyp = #internalBasisDatenTyp.getText
		val actualInternalKategorie = #internalKategorie.getText
		val actualInternalEncoding = #internalEncoding.getText
		val actualInternalTermination = #internalTermination.getText
		val actualFixedBitlength = #fixedBitLengthButton.isSelected
		val actualBitLength = #bitLength.getText
		assert [ junit::framework::Assert::assertEquals(physBasisDatenTyp.getValue(), actualPhysBasisDatenTyp.getValue()) ]
		assert [ junit::framework::Assert::assertEquals(physMinimum.getValue(), actualPhysMinimum.getValue()) ]
		assert [ junit::framework::Assert::assertEquals(physMaximum.getValue(), actualPhysMaximum.getValue()) ]
		assert [ junit::framework::Assert::assertEquals(physAufloesung.getValue(), actualPhysAufloesung.getValue()) ]
		assert [ junit::framework::Assert::assertEquals(physMinimumIntervallgrenze.getValue(), actualPhysMinimumIntervallgrenze.getValue()) ]
		assert [ junit::framework::Assert::assertEquals(physMaximumIntervallgrenze.getValue(), actualPhysMaximumIntervallgrenze.getValue()) ]
		assert [ junit::framework::Assert::assertEquals(internalBasisDatenTyp.getValue(), actualInternalBasisDatenTyp.getValue()) ]
		assert [ junit::framework::Assert::assertEquals(internalKategorie.getValue(), actualInternalKategorie.getValue()) ]
		assert [ junit::framework::Assert::assertEquals(internalEncoding.getValue(), actualInternalEncoding.getValue()) ]
		assert [ junit::framework::Assert::assertEquals(internalTermination.getValue(), actualInternalTermination.getValue()) ]
		assert [ junit::framework::Assert::assertEquals(true, actualFixedBitlength.getValue()) ]
		assert [ junit::framework::Assert::assertEquals(bitLength.getValue(), actualBitLength.getValue()) ]
	}
	
	useCase ActivateChangeRequest(StringDT name) initial EthernetNavigator {
		#activateChangeRequest(title=name)
	}
	
	useCase OpenEthernetNavigator initial MainWindow {
		call OpenView(OpenView.category="Other", OpenView.name="EthernetNavigator")
	}
	
	test OpenEthernetNavigatorTest generator de.msg.xt.mdt.base.SampleTestGenerator useCase OpenEthernetNavigator
	
	test CreateCodingTest generator de.msg.xt.mdt.base.SampleTestGenerator useCase CreateCoding {
		excludeTags Invalid Empty
	}	
	
	
		useCase ActivateChangeRequest(StringDT name) initial EthernetNavigator {
		#activateChangeRequest(title=name)
	}
	
	useCase CreateChangeRequest(ChangeRequestTitle name) initial MainWindow {
		call bne3.usecases.OpenEthernetNavigator
		#findEthernetNavigator
		#addChangeRequest
		#titel.setText(str=name)
		#saveAndClose
		#findEthernetNavigator
		#openChangeRequest(title=name.getValue())
		val actualTitle = #titel.getText
		assert [ junit::framework::Assert::assertEquals(name.getValue(), actualTitle.getValue())]
	}
	
	test CreateChangeRequestTest generator de.msg.xt.mdt.base.SampleTestGenerator useCase CreateChangeRequest
	
}