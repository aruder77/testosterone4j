package bne3.usecases.datatypetype for bne3.activities.Stdtoolkit {
	
	import de.msg.xt.mdt.tdsl.basictypes.*
	import de.msg.xt.mdt.tdsl.swtbot.*
	import bne3.datatypes.*
	import bne3.activities.*

	useCase CreateBasisdatentyp(ShortName codingShortName) initial MainWindow {
		call bne3.usecases.CreateMinimumCoding(bne3.usecases.CreateCoding.shortName=codingShortName)
		call bne3.usecases.OpenEthernetNavigator
		#findEthernetNavigator
		#addBasisDatentyp
		
		#allgemeinPage
		#longname.setText
		val longName = generatedValue(str)
		#shortname.setText
		val shortName = generatedValue(str)
		#packageSelectionCombo.setText(str="ABC")
		#textuelleBeschreibung.invokeContextMenu(contextMenuEntry="Element hinzufügen")
		#textuelleBeschreibung.setTextByName(row=0, columnName="Text")
		val text1 = generatedValue(textValue)	
		#textuelleBeschreibung.selectValueByName(row=0, columnName="Sprache")
		val sprache = generatedValue(textValue)	
		#textuelleBeschreibung.invokeContextMenu(contextMenuEntry="Element hinzufügen")
		#textuelleBeschreibung.setTextByName(row=1, columnName="Text", textValue="Second")
		#textuelleBeschreibung.selectValueByName(row=1, columnName="Sprache")
		#textuelleBeschreibung.invokeContextMenuOnRow(row=1, contextMenuEntry="Element löschen")
		#returnToEditor
		
		#speziellPage
		[ Thread::sleep(100) ]
		#codingSelectionSearchButton.push
		#searchText.setText(str=codingShortName.getValue())
		#searchButton.push
		#elements.selectRow(row=0)
		#okButton.push
		#saveAndClose
		
		#findEthernetNavigator
		#openBasisDatentyp(title=shortName.getValue())

		#allgemeinPage
		val actualLongName = #longname.getText
		val actualShortName = #shortname.getText
		val actualPackage = #packageSelectionCombo.getText
		val actualtext = #textuelleBeschreibung.getTextByName(row=0, columnName="Text")
		val actualSprache = #textuelleBeschreibung.getTextByName(row=0, columnName="Sprache")
		val actualAnzEntries = #textuelleBeschreibung.getRowCount
		assert [ junit::framework::Assert::assertEquals(longName.getValue(), actualLongName.getValue())] 
		assert [ junit::framework::Assert::assertEquals(shortName.getValue(), actualShortName.getValue())]
		assert [ junit::framework::Assert::assertEquals(text1.getValue(), actualtext.getValue())]
		assert [ junit::framework::Assert::assertEquals(sprache.getValue(), actualSprache.getValue())]
		assert [ junit::framework::Assert::assertEquals(1, actualAnzEntries.getValue())]
		assert [ junit::framework::Assert::assertEquals("ABC", actualPackage.getValue()) ]
		#returnToEditor
		
		#speziellPage
		val actualCoding = #codingSelectionText.getText
		assert [ junit::framework::Assert::assertTrue(actualCoding.getValue().matches(codingShortName.getValue() + " \\([0-9]+\\)")) ]
	}
	
	useCase CreateAufzaehlungstyp(ShortName codingShortName) initial MainWindow {
		call bne3.usecases.CreateMinimumCoding(bne3.usecases.CreateCoding.shortName=codingShortName)
		call bne3.usecases.OpenEthernetNavigator
		#findEthernetNavigator
		#addAufzaehlungstyp
		
		#allgemeinPage
		#longname.setText
		val longName = generatedValue(str)
		#shortname.setText
		val shortName = generatedValue(str)
		#packageSelectionCombo.setText(str="ABC")
		#textuelleBeschreibung.invokeContextMenu(contextMenuEntry="Element hinzufügen")
		#textuelleBeschreibung.setTextByName(row=0, columnName="Text")
		val text1 = generatedValue(textValue)	
		#textuelleBeschreibung.selectValueByName(row=0, columnName="Sprache")
		val sprache = generatedValue(textValue)	
		#textuelleBeschreibung.invokeContextMenu(contextMenuEntry="Element hinzufügen")
		#textuelleBeschreibung.setTextByName(row=1, columnName="Text", textValue="Second")
		#textuelleBeschreibung.selectValueByName(row=1, columnName="Sprache")
		#textuelleBeschreibung.invokeContextMenuOnRow(row=1, contextMenuEntry="Element löschen")
		#returnToEditor
		
		#speziellPage
		[ Thread::sleep(100) ]
		#codingSelectionSearchButton.push
		#searchText.setText(str=codingShortName.getValue())
		#searchButton.push
		#elements.selectRow(row=0)
		#okButton.push
		#speziellPage
		#enumElements.invokeContextMenu(contextMenuEntry="Element hinzufügen")
		#enumElements.setTextByName(row=0, columnName="Wert", textValue="5")
		#enumElements.setTextByName(row=0, columnName="Synonym", textValue="Synonym 1")
		#returnToEditor
		#saveAndClose
		
		#findEthernetNavigator
		#openAufzaehlungstyp(title=shortName.getValue())

		#allgemeinPage
		val actualLongName = #longname.getText
		val actualShortName = #shortname.getText
		val actualPackage = #packageSelectionCombo.getText
		val actualtext = #textuelleBeschreibung.getTextByName(row=0, columnName="Text")
		val actualSprache = #textuelleBeschreibung.getTextByName(row=0, columnName="Sprache")
		val actualAnzEntries = #textuelleBeschreibung.getRowCount
		assert [ junit::framework::Assert::assertEquals(longName.getValue(), actualLongName.getValue())] 
		assert [ junit::framework::Assert::assertEquals(shortName.getValue(), actualShortName.getValue())]
		assert [ junit::framework::Assert::assertEquals("ABC", actualPackage.getValue()) ]
		assert [ junit::framework::Assert::assertEquals(text1.getValue(), actualtext.getValue())]
		assert [ junit::framework::Assert::assertEquals(sprache.getValue(), actualSprache.getValue())]
		assert [ junit::framework::Assert::assertEquals(1, actualAnzEntries.getValue())]
		#returnToEditor
		
		#speziellPage
		val actualCoding = #codingSelectionText.getText
		val actualWert = #enumElements.getTextByName(row=0, columnName="Wert")
		val actualBinary = #enumElements.getTextByName(row=0, columnName="Wert (Binär)")
		val actualHex = #enumElements.getTextByName(row=0, columnName="Wert (Hexadezimal)")
		val actualSynonym = #enumElements.getTextByName(row=0, columnName="Synonym")
		assert [ junit::framework::Assert::assertTrue(actualCoding.getValue().matches(codingShortName.getValue() + " \\([0-9]+\\)")) ]
		
		assert [ junit::framework::Assert::assertEquals("5", actualWert.getValue()) ]
		assert [ junit::framework::Assert::assertEquals("101", actualBinary.getValue()) ]
		assert [ junit::framework::Assert::assertEquals("5", actualHex.getValue()) ]
		assert [ junit::framework::Assert::assertEquals("Synonym 1", actualSynonym.getValue()) ]
	}
	
	useCase CreateStrukturtyp(ShortName codingShortName) initial MainWindow {
		call bne3.usecases.CreateMinimumCoding(bne3.usecases.CreateCoding.shortName=codingShortName)
		call bne3.usecases.OpenEthernetNavigator
		#findEthernetNavigator
		#addStrukturtyp
		
		#allgemeinPage
		#longname.setText
		val longName = generatedValue(str)
		#shortname.setText
		val shortName = generatedValue(str)
		#packageSelectionCombo.setText(str="ABC")
		#textuelleBeschreibung.invokeContextMenu(contextMenuEntry="Element hinzufügen")
		#textuelleBeschreibung.setTextByName(row=0, columnName="Text")
		val text1 = generatedValue(textValue)	
		#textuelleBeschreibung.selectValueByName(row=0, columnName="Sprache")
		val sprache = generatedValue(textValue)	
		#textuelleBeschreibung.invokeContextMenu(contextMenuEntry="Element hinzufügen")
		#textuelleBeschreibung.setTextByName(row=1, columnName="Text", textValue="Second")
		#textuelleBeschreibung.selectValueByName(row=1, columnName="Sprache")
		#textuelleBeschreibung.invokeContextMenuOnRow(row=1, contextMenuEntry="Element löschen")
		#returnToEditor
		
		#speziellPage
		[ Thread::sleep(100) ]
		#returnToEditor
		#saveAndClose
		
		#findEthernetNavigator
		#openStrukturtyp(title=shortName.getValue())

		#allgemeinPage
		val actualLongName = #longname.getText
		val actualShortName = #shortname.getText
		val actualPackage = #packageSelectionCombo.getText
		val actualtext = #textuelleBeschreibung.getTextByName(row=0, columnName="Text")
		val actualSprache = #textuelleBeschreibung.getTextByName(row=0, columnName="Sprache")
		val actualAnzEntries = #textuelleBeschreibung.getRowCount
		assert [ junit::framework::Assert::assertEquals(longName.getValue(), actualLongName.getValue())] 
		assert [ junit::framework::Assert::assertEquals(shortName.getValue(), actualShortName.getValue())]
		assert [ junit::framework::Assert::assertEquals("ABC", actualPackage.getValue()) ]				
		assert [ junit::framework::Assert::assertEquals(text1.getValue(), actualtext.getValue())]
		assert [ junit::framework::Assert::assertEquals(sprache.getValue(), actualSprache.getValue())]
		assert [ junit::framework::Assert::assertEquals(1, actualAnzEntries.getValue())]
	}
	
	useCase CreateUniontyp(ShortName codingShortName) initial MainWindow {
		call bne3.usecases.CreateMinimumCoding(bne3.usecases.CreateCoding.shortName=codingShortName)
		call bne3.usecases.OpenEthernetNavigator
		#findEthernetNavigator
		#addUniontyp
		
		#allgemeinPage
		#longname.setText
		val longName = generatedValue(str)
		#shortname.setText
		val shortName = generatedValue(str)
		#packageSelectionCombo.setText(str="ABC")
		#textuelleBeschreibung.invokeContextMenu(contextMenuEntry="Element hinzufügen")
		#textuelleBeschreibung.setTextByName(row=0, columnName="Text")
		val text1 = generatedValue(textValue)	
		#textuelleBeschreibung.selectValueByName(row=0, columnName="Sprache")
		val sprache = generatedValue(textValue)	
		#textuelleBeschreibung.invokeContextMenu(contextMenuEntry="Element hinzufügen")
		#textuelleBeschreibung.setTextByName(row=1, columnName="Text", textValue="Second")
		#textuelleBeschreibung.selectValueByName(row=1, columnName="Sprache")
		#textuelleBeschreibung.invokeContextMenuOnRow(row=1, contextMenuEntry="Element löschen")
		#returnToEditor		

		#saveAndClose		

		#findEthernetNavigator
		#openUniontyp(title=shortName.getValue())
		
		#allgemeinPage
		val actualLongName = #longname.getText
		val actualShortName = #shortname.getText
		val actualPackage = #packageSelectionCombo.getText
		val actualtext = #textuelleBeschreibung.getTextByName(row=0, columnName="Text")
		val actualSprache = #textuelleBeschreibung.getTextByName(row=0, columnName="Sprache")
		val actualAnzEntries = #textuelleBeschreibung.getRowCount
		assert [ junit::framework::Assert::assertEquals(longName.getValue(), actualLongName.getValue())] 
		assert [ junit::framework::Assert::assertEquals(shortName.getValue(), actualShortName.getValue())]
		assert [ junit::framework::Assert::assertEquals("ABC", actualPackage.getValue()) ]				
		assert [ junit::framework::Assert::assertEquals(text1.getValue(), actualtext.getValue())]
		assert [ junit::framework::Assert::assertEquals(sprache.getValue(), actualSprache.getValue())]
		assert [ junit::framework::Assert::assertEquals(1, actualAnzEntries.getValue())]
		#returnToEditor

		#speziellPage
	}

	test CreateBasisdatentypTest generator de.msg.xt.mdt.base.SampleTestGenerator useCase CreateBasisdatentyp {
		excludeTags Invalid Empty
	}
	
	test CreateAufzaehlungstypTest generator de.msg.xt.mdt.base.SampleTestGenerator useCase CreateAufzaehlungstyp {
		excludeTags Invalid Empty
	}
	
	test CreateStrukturtypTest generator de.msg.xt.mdt.base.SampleTestGenerator useCase CreateStrukturtyp {
		excludeTags Invalid Empty
	}
	test CreateUniontypTest generator de.msg.xt.mdt.base.SampleTestGenerator useCase CreateUniontyp {
		excludeTags Invalid Empty
	}	
}