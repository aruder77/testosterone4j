grammar de.msg.xt.mdt.tdsl.TDsl with org.eclipse.xtext.xbase.Xbase

generate tDsl "http://www.msg.de/xt/mdt/tdsl/TDsl"
import 'http://www.eclipse.org/xtext/xbase/Xbase' as xbase


TestModel:
	(packages+=PackageDeclaration)*
;

PackageDeclaration:
    'package' name=QualifiedName '{'
    	(elements+=Element)*
    '}';
    
Element:
	Activity | UseCase | Control | Type | DataType | Test | TagsDeclaration | ActivityType
;

Type:
	'type' name=ID 'mappedBy' mappedBy=JvmTypeReference
;

DataType:
	'datatype' name=ID 'type' type=[Type|FQN] '{'
		(classes+=EquivalenceClass)+
	'}'
;

EquivalenceClass:
	'class' name=ID 'value' value=STRING (tags+=[Tag|FQN])*
;

TagsDeclaration:
	'tags' '{'
		tags+=Tag (',' tags+=Tag)*
	'}'
;

Tag:
	name=ID
;

Control:
	'control' name=ID '{'
		(operations+=Operation)+
	'}'
;

Operation:
	'op' name=ID ('(' params+=ControlOperationParameter (',' params+=ControlOperationParameter)* ')')? (':' returnType=[Type|FQN])?
;

ControlOperationParameter:
	type=[Type|FQN] name=ID
;
    
Activity:
	'activity' name=ID ('identifiedBy' uniqueId=STRING)? 'type' type=[ActivityType|FQN] '{'
		(fields+=Field)*
		(operations+=ActivityOperation)*
	'}'
;

ActivityType:
	'activityType' name=ID
;

ActivityOperationParameter:
	dataType=[DataType|FQN] name=ID
;

ActivityOperation:
	'op' name=ID ('(' params+=ActivityOperationParameter (',' params+=ActivityOperationParameter)* ')')? (':' returnType=[DataType|FQN])? (nextActivities+=ConditionalNextActivity)*
;

Field:
	'field' name=ID ('identifiedBy' uniqueId=STRING)? 'control' control=[Control|FQN] ('datatype' dataType=[DataType|FQN])? (tags+=TagWithCondition)* 
	(
		 '{' 
		 (operations+=OperationMapping)+	
		 '}'
	)?
;

TagWithCondition:
	'tag' tag=[Tag|FQN] ('if' condition=XExpression)?
;

OperationMapping:
	name=ID operation=[Operation|FQN] ('(' (dataTypeMappings+=DataTypeMapping) (',' dataTypeMappings+=DataTypeMapping)* ')')? ('as' dataType=[DataType|FQN])? ('guard' guard=XExpression)?  (nextActivities+=ConditionalNextActivity)*
;

DataTypeMapping:
	name=ID datatype=[DataType|FQN] controlOperationParameter=[ControlOperationParameter|FQN] 
;

ConditionalNextActivity:
	'=>' next=[Activity|FQN] ('if' guard=XExpression)?
;

Parameter:
	dataType=[DataType|FQN] name=ID	
;

ParameterAssignment:
	name=[Parameter|FQN] '=' value=XExpression
;

ParameterInput returns xbase::XExpression:
	GenerationSelektor | XExpression
;

/*
 * Parameter for a parameter generation. The generator only takes an array of tags.
 * The takes may be specified directly using 'select(tags TAG_A, TAG_B)' or dynamically
 * via an expression 'select(someXBaseExpression)'.
 */
GenerationSelektor returns xbase::XExpression:
	{GenerationSelektor}
	'select' =>('(' (('tags' tags+=[Tag|ID] (',' tags+=[Tag|ID])*) | expression=XExpression) ')' )?
;

OperationParameterAssignment:
	name=[DataTypeMapping|FQN] '=' value=ParameterInput
;

ActivityOperationParameterAssignment:
	name=[ActivityOperationParameter|FQN] '=' value=ParameterInput
;

Test:
	'test' name=ID 'generator' generator=JvmTypeReference 'useCase' useCase=[UseCase|FQN]
;

UseCase:
	'useCase' name=ID ('(' inputParameter+=Parameter (',' inputParameter+=Parameter)* ')')? 'initial' '=' initialActivity=[Activity|FQN]
		block=UseCaseBlock
;

UseCaseBlock returns xbase::XBlockExpression:
	{xbase::XBlockExpression}
  	'{' (expressions+=Statement)* '}'
;

Statement returns xbase::XExpression:
	SubUseCaseCall | OperationCall | ActivityOperationCall | VariableDeclaration | =>IfExpression | XAssignment //| CompoundStatement
;

VariableDeclaration returns xbase::XVariableDeclaration:
	{xbase::XVariableDeclaration}
	(writeable?='var') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=Expression)?
;

Expression returns xbase::XExpression:
	OperationCall | GeneratedValueExpression | XExpression
;

GeneratedValueExpression returns xbase::XExpression:
	{GeneratedValueExpression}
	'generatedValue' '(' param=[DataTypeMapping|FQN] ')'
;


IfExpression returns xbase::XExpression:
	{xbase::XIfExpression}
	'if' '(' if=Expression ')'
	then=UseCaseBlock
	(=>'else' else=UseCaseBlock)?;


FQN:
	ID ('.' ID)*
;

OperationCall returns xbase::XExpression:
	{OperationCall}
	'op' operation=[OperationMapping|FQN] =>('(' 'a' (paramAssignment+=OperationParameterAssignment) (',' paramAssignment+=OperationParameterAssignment)* ')')?
;

ActivityOperationCall returns xbase::XExpression:
	{ActivityOperationCall}
	'activityOperation' operation=[ActivityOperation|FQN] =>('(' (paramAssignment+=ActivityOperationParameterAssignment) (',' paramAssignment+=ActivityOperationParameterAssignment)* ')')?
;

SubUseCaseCall returns xbase::XExpression:
	{SubUseCaseCall}
	'call' useCase=[UseCase|FQN] =>('(' paramAssignment+=ParameterAssignment (',' paramAssignment+=ParameterAssignment)*  ')')?
;

/*
CompoundStatement:
	'(' statements+=Statement ('|' statements+=Statement)+ ')'
; */


